version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack\ 
            --stack-name prod-${CIRCLE_WORKFLOW_ID}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    
    steps:
      - run:
          name: Revert migrations
          command: >
            # Curl command here to see if there was a successful migration
            associated with the workflow id, store result in SUCCESS variable

            SUCCESS = 1

            if(( $SUCCESS==1 )); 

            then

            #  cd ~/project/backend

            #  npm install

            #  Add revert code here. You can find this in the Getting Started
            section.
              exit 1
            fi
jobs:
  build-frontend:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-build
  build-backend:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build
  test-frontend:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Run frontend test
          command: |
            cd frontend 
            npm install 
            npm run test

  test-backend:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Run backend test
          command: | 
            cd backend 
            npm install 
            npm run test
  scan-frontend:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run: 
          name: Scan frontend dependencies
          command: |
            cd frontend 
            npm install 
            npm audit fix --audit-level=critical --force
            
  scan-backend:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run: 
          command: |
            cd backend 
            npm install 
            npm audit fix --audit-level=critical --force || true
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-CLI
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: udepleople1-backend
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=jlbackend1-udepeople1-tag \
               --stack-name  udepleople1-backend ${CIRCLE_WORKFLOW_ID:0:7}\
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \ 
              tags project=jlbackend1-udepeople1-tag
      - run:
          name: udepleople1-frontkend
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=jlfrontend-udepeople1-tag \
               --stack-name udepleople1-frontkend ${CIRCLE_WORKFLOW_ID:07} \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \ 
              tags project=jlfrontend-udepeople1-tag
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances
            --filters "Name=tag:Name.Values=backend-${CIRCLE_WORKFLOW_ID:07}"\
            --query 'Reservations[*].instances[*].PublicIpAddress'\
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: 'python:3.7-alpine3.11'
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: ["b5:76:68:0a:36:c4:41:fa:b9:d6:20:fd:c4:fc:4f:01"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt playbook.yml
      - destroy-environment 
  run-migrations:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here ?
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" \
            -H "token: 6db56583-4d0a-4d42-92a0-cfcb2c8120cd" \
            --request PUT --data "migration-result" \
            https://api.memstash.io/values
      - destroy-environment
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update --ansible
      - run:
          name: Get backend url
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            AWS cloudformation deploy\
            --template-file create frontend.yml \
            -- stack-name -udapeople1-frontend-${CIRCLE_WORKFLOW_ID}
      - destroy-environment
  deploy-backend:
    docker:
      - image: 'python:3.7-alpine3.11'
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: ["b5:76:68:0a:36:c4:41:fa:b9:d6:20:fd:c4:fc:4f:01"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            AWS cloudformation deploy\
            --template-file create backend.yml \
            -- stack-name back-end-${CIRCLE_WORKFLOW_ID}
      - destroy-environment
  smoke-test:
    docker:
      - image: 'alpine:latest'
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Get backend url
          command: ''
      - run:
          name: Backend smoke test.
          command: |
            URL="https://backend.udepeople1.com/"
            if curl -s --head ${URL} 
            then
             return 0
            else
             return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="https://frontend.udepeople1.com/"
            if curl -s --head ${URL} 
            then
             return 0
            else
             return 1
            fi
      - destroy-environment
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file template.yml \
            --stack-name udepeople1-cloudfront \
            --region us-west-2 
      - destroy-environment
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name== \
            `WorkflowID\`].Value" \
            --no-paginate --output text)

            export STACKS=($(aws cloudformation list-stacks --query \
            "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text))  
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
            aws cloudformation delete-stack \
            --stack-name "udepeople1-backend-${OldWorkflowID}" \
            aws s3 rm "s3://udepeople1-${OldWorkflowID}" --recursive)
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only:
                - test-feature-branch
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires:
            - smoke-test
      - cleanup:
          requires:
            - cloudfront-update
